// <auto-generated />
using System;
using Kruger.Marketplace.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Kruger.Marketplace.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("SQL_Latin1_General_CP1_CI_AI")
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Kruger.Marketplace.Business.Models.CadastroBasico.Categoria", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("VARCHAR(500)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)");

                    b.HasKey("Id");

                    b.HasIndex("Nome")
                        .IsUnique()
                        .HasDatabaseName("IX_NOME_CATEGORIA");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex("Nome"), 80);

                    b.ToTable("CATEGORIAS", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("2ce8ce71-e766-41ee-839a-f0824f7fd3b8"),
                            Descricao = "Categoria destinada a vestuário",
                            Nome = "Vestuário"
                        },
                        new
                        {
                            Id = new Guid("7b87817f-f13c-4a68-87c5-0fc28eda22ce"),
                            Descricao = "Eletrônicos e eletrodomésticos",
                            Nome = "Eletrônicos"
                        },
                        new
                        {
                            Id = new Guid("63cb29c3-db97-4744-b01d-def53fc1cccb"),
                            Descricao = "Comidas em geral",
                            Nome = "Alimentação"
                        });
                });

            modelBuilder.Entity("Kruger.Marketplace.Business.Models.CadastroBasico.Produto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoriaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("VARCHAR(500)");

                    b.Property<int>("Estoque")
                        .HasColumnType("INT");

                    b.Property<string>("Imagem")
                        .HasColumnType("VARCHAR(500)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)");

                    b.Property<decimal>("Preco")
                        .HasColumnType("DECIMAL(18,2)");

                    b.Property<Guid>("VendedorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId");

                    b.HasIndex("Nome")
                        .HasDatabaseName("IX_PRODUTO_NOME");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex("Nome"), 80);

                    b.HasIndex("VendedorId");

                    b.HasIndex("Nome", "CategoriaId", "VendedorId")
                        .IsUnique()
                        .HasDatabaseName("UQ_PRODUTO_NOME_CATEGORIAID_VENDEDORID");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex("Nome", "CategoriaId", "VendedorId"), 80);

                    b.ToTable("PRODUTOS", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("b751c2c9-a918-40f0-a627-e698ab305787"),
                            CategoriaId = new Guid("7b87817f-f13c-4a68-87c5-0fc28eda22ce"),
                            Descricao = "Personal Computer",
                            Estoque = 100,
                            Imagem = "00000000-0000-0000-0000-000000000000_imagem.jpg",
                            Nome = "Computador",
                            Preco = 5000m,
                            VendedorId = new Guid("f96e5735-7f8a-49a7-8fe1-64304e70257d")
                        },
                        new
                        {
                            Id = new Guid("1a8a7249-e705-4b54-ae6e-528cbaeef9bb"),
                            CategoriaId = new Guid("7b87817f-f13c-4a68-87c5-0fc28eda22ce"),
                            Descricao = "mouse com fio",
                            Estoque = 20,
                            Imagem = "00000000-0000-0000-0000-000000000000_imagem.jpg",
                            Nome = "Mouse",
                            Preco = 60m,
                            VendedorId = new Guid("f96e5735-7f8a-49a7-8fe1-64304e70257d")
                        },
                        new
                        {
                            Id = new Guid("70903fd0-a29e-45d6-95a8-4abd5c91beff"),
                            CategoriaId = new Guid("7b87817f-f13c-4a68-87c5-0fc28eda22ce"),
                            Descricao = "teclado mecânico",
                            Estoque = 15,
                            Imagem = "00000000-0000-0000-0000-000000000000_imagem.jpg",
                            Nome = "Teclado",
                            Preco = 100m,
                            VendedorId = new Guid("f96e5735-7f8a-49a7-8fe1-64304e70257d")
                        },
                        new
                        {
                            Id = new Guid("7cbb1134-114d-48f9-8981-2504292ff095"),
                            CategoriaId = new Guid("7b87817f-f13c-4a68-87c5-0fc28eda22ce"),
                            Descricao = "Monitor curso 27",
                            Estoque = 28,
                            Imagem = "00000000-0000-0000-0000-000000000000_imagem.jpg",
                            Nome = "Monitor",
                            Preco = 780m,
                            VendedorId = new Guid("f96e5735-7f8a-49a7-8fe1-64304e70257d")
                        });
                });

            modelBuilder.Entity("Kruger.Marketplace.Business.Models.CadastroBasico.Vendedor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasColumnType("VARCHAR(256)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("UQ_VENDEDOR_EMAIL");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex("Email"), 80);

                    b.HasIndex("Nome")
                        .HasDatabaseName("IX_VENDEDOR_NOME");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex("Nome"), 80);

                    b.ToTable("VENDEDORES", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("f96e5735-7f8a-49a7-8fe1-64304e70257d"),
                            Email = "mail.teste@teste.com",
                            Nome = "mail.teste@teste.com",
                            Senha = "AQAAAAIAAYagAAAAENA2RjJ4jnsw0C4D6LFFHRriWH/yoMrh5JfGrf46u1jflvNnDgyd4Qg4AcCI3ixNTQ=="
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            ConcurrencyStamp = "2c5e174e-3b0e-446f-86af-483d56fd7210",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRADOR"
                        },
                        new
                        {
                            Id = "2",
                            ConcurrencyStamp = "16aacd76-5c6d-418a-884c-116871ca2fe0",
                            Name = "Vendedor",
                            NormalizedName = "VENDEDOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(100)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "f96e5735-7f8a-49a7-8fe1-64304e70257d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bcdca5bf-167d-41eb-b47b-984b645a8149",
                            Email = "mail.teste@teste.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "MAIL.TESTE@TESTE.COM",
                            NormalizedUserName = "MAIL.TESTE@TESTE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENA2RjJ4jnsw0C4D6LFFHRriWH/yoMrh5JfGrf46u1jflvNnDgyd4Qg4AcCI3ixNTQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "df8fc39d-173c-476b-993e-a5c23d291f0e",
                            TwoFactorEnabled = false,
                            UserName = "mail.teste@teste.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(100)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "f96e5735-7f8a-49a7-8fe1-64304e70257d",
                            RoleId = "2"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Value")
                        .HasColumnType("varchar(100)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Kruger.Marketplace.Business.Models.CadastroBasico.Produto", b =>
                {
                    b.HasOne("Kruger.Marketplace.Business.Models.CadastroBasico.Categoria", "Categoria")
                        .WithMany("Produto")
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_PRODUTO_CATEGORIAID");

                    b.HasOne("Kruger.Marketplace.Business.Models.CadastroBasico.Vendedor", "Vendedor")
                        .WithMany("Produto")
                        .HasForeignKey("VendedorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_PRODUTO_VENDEDORID");

                    b.Navigation("Categoria");

                    b.Navigation("Vendedor");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Kruger.Marketplace.Business.Models.CadastroBasico.Categoria", b =>
                {
                    b.Navigation("Produto");
                });

            modelBuilder.Entity("Kruger.Marketplace.Business.Models.CadastroBasico.Vendedor", b =>
                {
                    b.Navigation("Produto");
                });
#pragma warning restore 612, 618
        }
    }
}
